package logic;

import java.util.List;

public interface CoverabilityNodeInterface {
    int[] getPetriState();
    CoverabilityNodeInterface getParent();
    List<CoverabilityNodeInterface> getSmallerAncestor();
    CoverabilityNodeInterface getEqualAncestor();

    /**
     * If the PetriNet is in a state where all places have the same or more tokens than a state used to get there
     * (with at least one point that has more tokens), then there is a positive feedback loop.  The places with more
     * tokens can become infinite.  This function detects this possibility.
     *
     * @return true if there is an ancestor in the tree where all the places are less than or equal this.  Else, false.
     */
    boolean hasPropagatableAncestors();

    /**
     * If the PetriNet is in a state where all places have the same or more tokens than a state used to get there
     * (with at least one point that has more tokens), then there is a positive feedback loop.  The places with more
     * tokens can become infinite.  This function creates such a node.
     *
     * @return A propagated node, such that any positive feedback loops are made infinite.
     */
    CoverabilityNodeInterface generatePropagate();

    /**
     *
     * @return true if there is an ancestor equal to this node.
     */
    boolean isTerminal();

    /**
     *
     * @return A list of children of this node.
     */
    List<CoverabilityNodeInterface> getChildren();

    /**
     *
     * @param newChild The child to be added to this node.
     */
    void addChild(CoverabilityNodeInterface newChild);

    /**
     *
     * @return The transition used to get to this point.  null if generated by generatePropagate or if it is the root.
     */
    TransitionInterface usedTransition();
}
